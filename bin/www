#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const mongoose = require('mongoose')
const fs = require('fs')
const debug = require('debug')('node-vue-pro:server')
const http = require('http')
/**
 * 连接MongoDB数据库
 */
mongoose.connect('mongodb://localhost/test', {useNewUrlParser: true, useFindAndModify: false})
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
const indexPath = './public/index.html'
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
/*const server = http.createServer((req, res) => {
    fs.readFile(indexPath, 'utf-8', (err, content) => {
        if (err) {
            console.log('We cannot open "index.html" file.')
        }
        res.writeHead(200, {
            'Content-Type': 'text/html; charset=utf-8'
        })

        res.end(content)
    })
}).listen(port, () => {
    console.log('Server listening on: http://localhost:%s', port)
})*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10)
    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    debug('Listening on ' + bind)
}
